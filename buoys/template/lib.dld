#If Section = "Constants" Then
    Const CELL_BILLING_DAY As Long = 1 ' For data usage calculations, to know which day of month the billing cycle resets
    Const CELL_WINDOW_DURATION As Long = 10
    Const CELL_WINDOW_FREQUENCY As Long = 1440 
    Const CELL_WINDOW_START As Long = 1440 ' Always on = 1440
    Const CURRENT_PORT As Long = 5
    Const CURRENT_ZERO_mV As Long = 1244 ' To recalibrate: Remove fuse and power Ai1 from charging input, measure Current_mV
    Const DATA_TABLE_ROWS As Long = 3000
    Const FILTER_FREQUENCY As Long = 4000 ' Set to 50 or 60 for AC noise, otherwise 4000Hz is quickest processing
    Const HUMIDITY_PORT As Long = 6
    Const LOW_BATTERY_SAVER_V As Float = 12.83
    Const LOW_BATTERY_SHUTDOWN_V As Float = 12.75 ' Battery protection thresholds.
    Const SCAN_INTERVAL_S As Long = 60 ' Diagnostic scan Interval
    Const MEASUREMENT_INTERVAL_S As Long = 900 ' Sensor measurement interval 
    Const READ_ATTEMPTS_LIMIT As Long = 4 ' Try to read sonde
#EndIf

#If Section = "Additional" Then
    Const NONE As Long = 0
    Const CELLULAR As Long = 1
    Const WIFI As Long = 2
    Const RADIO As Long = 3
    Const IRIDIUM As Long = 4
    Const TRANSPARENT As Long = 5
    Const LORAWAN As Long = 6
    Const RADTRANS As Long = 7
    Const JOIN As Long = 0
    Const CREATE As Long = 1
    Const LITHIUM As Long = 1
    Const LITHIUM_12V As Long = 2
    Const LEAD_ACID As Long = 3
    Const EXT As Long = 4
    Const SUPPLY_3V3 As Float = 3.3
    Const SUPPLY_5V As Float = 5
    Const RISING_EDGE As Long = 1
    Const HIGH_LEVEL As Long = 2
    Const FALLING_EDGE As Long = 3
    Const LOW_LEVEL As Long = 4 ' Types of event activationA11
    Const EXO2 As Long = 2
    Const EXO3 As Long = 3
    Const OTT_CBS As Long = 4
    Const AT200 As Long = 5
    Const YSI6SERIES As Long = 6
    Const ULTRA As Long = 7
    Const LEVEL_4TO20 As Long = 8
    Const RADAR As Long = 9
    Const ULTRA_SERIAL As Long = 10
    Const SUNA As Long = 11
    Const VEGAPULS As Long = 12
    Const SDI12 As Long = 1
    Const RS232 As Long = 2
    Const ANALOG As Long = 3
    Const RS485 As Long = 4
    Const ADD As Long = 1
    Const SUBTRACT As Long = 2
    Const ABSOLUTE As Long = 1
    Const DIFFERENTIAL As Long = 2
    Const AIRMAR As Long = 3
    Const AMAZON As Long = 13
    Const PROSWAP As Long = 14
    Const READ_COILS As Long = 1
    Const READ_DISCRETE_INPUTS As Long = 2
    Const READ_HOLDING_REGISTERS As Long = 3
    Const READ_INPUT_REGISTERS As Long = 4
    Const WRITE_SINGLE_COIL As Long = 5
    Const WRITE_SINGLE_REGISTER As Long = 6
    Const WRITE_MULTIPLE_COILS As Long = 15
    Const WRITE_MULTIPLE_REGISTERS As Long = 16
    Const RTU_32_FLOAT_OR_LONG_CDAB As Long = 0
    Const RTU_16_SIGNED_INTEGER As Long = 1
    Const RTU_32_FLOAT_OR_LONG_ABCD As Long = 2
    Const RTU_16_UNSIGNED_INTEGER As Long = 3
    Const ASCII_4_BYTES_CDAB As Long = 10
    Const ASCII_2_BYTES As Long = 11
    Const ASCII_4_BYTES_ABCD As Long = 12
    Const TIMER_STOP As Long = 1
    Const TIMER_RESET_AND_START As Long = 2
    Const TIMER_RESET_AND_STOP As Long = 3
    Const TIMER_READ As Long = 4
    Const ALLOW_SLEEP As Long = 1
    Const GPS_TIMER As Long = 11
    Const WEB_TIMER As Long = 12
    Const SENSOR_TIMER As Long = 13
    Const PUMP_TIMER As Long = 14
    Const IRIDIUM_TIMER As Long = 15
    Const MODBUS_TIMER As Long = 16
    Const DISPLAY_TIMER As Long = 17
    Const SAMPLER_TIMER As Long = 18
    Const INSITU_SENSOR_TIMER As Long = 19
    Const EVENT_TIMER As Long = 20 
    Const ONE_SHOT As Long = 0
    Const TIME_BASED As Long = 1
    Const RISING_STAGE As Long = 2
    Const RISING_AND_FALLING_STAGE As Long = 3 ' Types of sampler activation
    Const CRLF = CHR(13) + CHR(10)
    Const CR = CHR(13)
    Const LF = CHR(10)
    Const SPACE = CHR(32)
    Const ESC = CHR(27)
    Const PSI_TO_hPa As Float = 68.94757
    Const FORWARD As Long = 1
    Const REVERSE As Long = 2
    Const STOPPED As Long = 0
    Const RUNNING As Long = 1
#EndIf

#If Section = "Pressure" Then
    Const PRESSURE_PARAMETERS As Long = 3
    Const PRESSURE_PORT As Long = 3.3
    Const PRESSURE_READINGS As Long = 7 ' Number of measurements to take from averaging this single reading
    Const PRESSURE_TIME_AVERAGING As Long = 5 ' The period over which to take time averaged pressure readings

    ' Read the pressure sensor voltage and convert to barometric pressure
    Dim BarometricPressure: Units BarometricPressure = hPa
    Dim PressureArray(PRESSURE_READINGS) As Float ' Array to hold readings from which the median value is used
    Dim PressureTimeArray(PRESSURE_TIME_AVERAGING) As Float ' tail of pressure time series, init at compile time
    Dim PressureTimeArraySorted(PRESSURE_TIME_AVERAGING) ' hold the sorted values for median
    Dim Pressure_Voltage, Recent as Long
    Dim PressureFirstReading As Boolean = True ' Set at compile time
    Sub ReadBarometricPressure
        VoltSe(PressureArray(), PRESSURE_READINGS, mv2500, -PRESSURE_PORT, True, 2000, 50, 0.001, 0)
        SortSpa(PressureArray(), PRESSURE_READINGS, PressureArray())
        Pressure_Voltage = PressureArray(Ceiling(PRESSURE_READINGS/2))
        If PressureFirstReading Then ' First time through the program fill the array with the initial value
            For Recent = 1 To PRESSURE_TIME_AVERAGING
                PressureTimeArray(Recent) = Pressure_Voltage
            Next Recent
            PressureFirstReading = False
        Else
            For Recent = 1 To PRESSURE_TIME_AVERAGING - 1
                PressureTimeArray(Recent) = PressureTimeArray(Recent + 1)
            Next Recent
            PressureTimeArray(PRESSURE_TIME_AVERAGING) = Pressure_Voltage
        End If
        SortSpa(PressureTimeArraySorted(), PRESSURE_TIME_AVERAGING, PressureTimeArray())
        BarometricPressure = (0.725*PressureTimeArraySorted(Ceiling(PRESSURE_TIME_AVERAGING/2)) - 0.2625)*1000
    End Sub
#EndIf

#If Section = "IO" Then
    Public Message As String * 256 = ""
    Dim BatteryVoltage As Float: Units BatteryVoltage = Volts
    Dim InternalTemperature As Float: Units InternalTemperature = Â°C

    ' Set the voltage level of the Vx1 port that controls
    ' RS485 communication. Off is 0 mV, on in 5000 mV.
    Dim Vx1Voltage As Long
    Sub SetVx1mV(Voltage As Long)
        If Voltage <> Vx1Voltage Then
            Vx1Voltage = Voltage
            ExciteV(Vx1, Voltage, 0)
        End If
    End Sub

    ' Set the state of the 12V power supply to the sonde.
    Dim SensorPowerStatus As Boolean
    Sub SetSW12V(State As Long)
    Dim StateMask As Long = 0
        If SensorPowerStatus <> State Then 
            If State Then StateMask = &B01000000 Else StateMask = 0
            WriteIO(&B01000000, StateMask)
            SensorPowerStatus = State
        End If
    End Sub

    ' Vx2 has high power regulator as well.
    ' Due to enable/disable circuit Vx2 can not be fully turned off.
    ' Anything >400mV is accurate.
    Dim Vx2Voltage As Long
    Sub SetVx2mV(Voltage As Long)
        If Vx2Voltage <> Voltage Then
            Message = "Setting Port Vx2 to " + (Vx2Voltage/1000) + "V"
            ExciteV(Vx2, Voltage, 0)
            Vx2Voltage = Voltage
        End If
    End Sub

    Dim ModemPower As Boolean ' state of the cellular modem power
    Sub SetModemPower(State As Boolean)
        If ModemPower <> State Then
            Message = "Setting Modem State to " + State
            ModemPower = State
            IPNetPower(5, State)
        End If
    End Sub

    ' Read the humidity sensor voltage and use board temperature correction
    ' to get the internal humidity.
    Dim HumidityVoltage As Float
    Dim InternalHumidity As Long: Units InternalHumidity = %
    Sub ReadInternalHumidity(Temperature As Float)
        VoltSe(HumidityVoltage, 1, mV2500, HUMIDITY_PORT, True, 50000, FILTER_FREQUENCY, 1.0, 0.0)
        InternalHumidity = (((HumidityVoltage/3300)-0.1515)/0.0052)/(1.0546-0.00216*Temperature)
    End Sub

    ' Read the voltage and calculate current draw.
    Dim Current As Long: Units Current = mA
    Dim Current_mV As Float = 0.0
    Sub ReadCurrent
        VoltSe(Current_mV, 1, mv2500, CURRENT_PORT, True, 0, FILTER_FREQUENCY, 1, 0)
        Current = (Current_mV - CURRENT_ZERO_mV) * 5 ' Normal output is 400mA/1000mV, or 2.5mV/mA, but with 2:1 voltage divider it is 5mV/mA
    End Sub
#EndIf
