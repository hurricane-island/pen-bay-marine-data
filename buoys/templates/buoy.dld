StationName = $STATION_NAME ' No quotes!
Const HYDROSPHERE_ID = "$CLIENT_ID" ' Hydrosphere site.
Const PARAMETERS_TO_SEND = 14
Const MAX_TX_ATTEMPTS = 5 ' Connection attempts
Const BUFFER_SIZE As Long = 96 ' = 4 days
Const HYDROSPHERE_TIMEOUT As Long = 500 ' x 0.01s
Const DIAGNOSTIC_INTERVAL_S As Long = 900 ' seconds
Const REPORT_INTERVAL_S As Long = 900 ' seconds
Const MEASUREMENT_INTERVAL_S As Long = 3600 ' seconds
Const CLEANING_INTERVAL_S As Long = 1800 ' seconds
Const LOW_BATTERY_SHUTDOWN_V = 12.75 ' V
Const LOW_BATTERY_RESTORE_V = 13.0 ' V
Const CELL_WINDOW_START As Long = 1440
Const CELL_WINDOW_DURATION As Long = 10
Const CELL_WINDOW_FREQUENCY As Long = 1440  ' Modem is always on when CELL_WINDOW_START = 1440
Const CURRENT_ZERO_mV As Long = 1250 ' mV. To recalibrate: Remove fuse and power Ai1 from charging input, measure Current_mV
Const SENSOR_QTY As Long = 1  ' sensors fitted to this station
Const TABLE_WQ As Long = 200000
Const SONDE_USED As Boolean = True
Const SONDE_USES_RS485 As Boolean = True
Const SONDEVALUES_TBL_SIZE As Long = 5000
Const PRESSURE_PORT As Long = 3
Const YSIPPORT As Long = ComRS232
Const FILTER_FREQUENCY As Long = 4000 ' 50 or 60 for AC noise, otherwise 4000Hz
Const ALLOW_SLEEP As Long = 1
Const CR = CHR(13)
Const hPa_TO_m As Float = 0.0101972
Const CURRENT_PORT As Long = 5
Const HUMIDITY_PORT As Long = 6
Const MAX_READ_ATTEMPTS As Long = 4
Const GPS_BUFFER As Long = 512 ' uBlox GPS message size
Const GPS_PARAMETERS As Long = 9 ' 1=Time(UTC),2=Date,3=Lat(ddmm),4=Lat(.mmmmmm),5=Long(ddmm),6=Long(.mmmmmm),7=Alt,8=Fix,9=#Sat
Const GPS_SATELLITES_REQUIRED As Long = 4 ' Minimum number of satellites to accept a GPS reading
Const PRESSURE_READINGS As Long = 7 ' Number of measurements to take from averaging this single reading
Const PRESSURE_TIME_AVERAGING As Long = 5 ' Time averaging of pressure readings

Public ExternalTemp As Float ' First reading from the sonde, use this instead of External_Temp
Public Ai1WipesSonde As Boolean = True ' TODO: is this needed by YSIP_CORE?
Public Errors As String * 128 = "" ' TODO: needed by YSI?
Public Message As String * 256 = ""
Public InternalTemperature As Float: Units InternalTemperature = °C
Public InternalHumidity As Long: Units InternalHumidity = % ' Report only whole numbers
Public BatteryVoltage As Float: Units BatteryVoltage = Volts
Public Latitude As Float: Units Latitude = Decimal Degrees (N=+,S=-)  ' recombined into a single value.
Public Longitude As Float: Units Longitude = Decimal Degrees (E=+,W=-)
Public GPSSatellitesInView As Long: Units GPSSatellitesInView = GPS Satellites visible
Public HydrosphereBufferNextPointer As Long = 1 ' records in buffer
PreserveOneVariable(Latitude)
PreserveOneVariable(Longitude) ' Save between power cycles


Dim i As Long = 0 ' For internal counters only
Dim LowPowerMode As Boolean = False ' retain between system checks
Dim Current_mA As Long: Units Current_mA = mA
Dim Ai1OSVersion As Float = 0.75
Dim DataloggerOSVersion As Float ' Used for holding CR300 OS version
Dim ReadAttempts As Long ' Times sensor read was attempted
Dim ProgramCounter As Long: Units ProgramCounter = Cycles ' Program cycles since power up
Dim ProcessingTime: Units ProcessingTime = µS
Dim ParameterToSend(PARAMETERS_TO_SEND) As Long ' pointer
Dim HydrosphereData As String *(22+PARAMETERS_TO_SEND*10) ' one full record string
Dim HydrosphereDataBuffer(BUFFER_SIZE) As String *(22+PARAMETERS_TO_SEND*10)
Dim HydrosphereNames As String *(PARAMETERS_TO_SEND*26)

Dim Pressure(3) As Float
Alias Pressure(1) = Pressure_Voltage
Alias Pressure(2) = Pressure_hPa
Alias Pressure(3) = Pressure_mH2O: Units Pressure_mH2O = mH2O

Dim rTime(9)
Alias rTime(1) = Year
Alias rTime(2) = Month
Alias rTime(3) = DayOfMonth
Alias rTime(4) = Hour
Alias rTime(5) = Minute
Alias rTime(6) = Second
' Alias rTime(7) = uSecond
' Alias rTime(8) = WeekDay
' Alias rTime(9) = DayOfYear

' YSI Sonde Libraries
Include "CPU:YSIP_CONST_Enc.CR300"
Include "CPU:YSIP_CORE_Enc.CR300"
' Alias SondeValuesSorted(45) = Sonde_Future1
' Alias SondeValuesSorted(46) = Sonde_Future2
' Alias SondeValuesSorted(47) = Sonde_Future3
' Alias SondeValuesSorted(48) = Sonde_Future4
' Alias SondeValuesSorted(49) = Sonde_Future5
' Alias SondeValuesSorted(50) = Sonde_Future6
' Alias SondeValuesSorted(51) = Sonde_Future7
' Alias SondeValuesSorted(52) = Sonde_Future8
' Alias SondeValuesSorted(53) = Sonde_Future9
' Alias SondeValuesSorted(54) = Sonde_Future10
' Alias SondeValuesSorted(55) = Sonde_Future11
' Alias SondeValuesSorted(56) = Sonde_Future12
' Alias SondeValuesSorted(57) = Sonde_Future13
' Alias SondeValuesSorted(58) = Sonde_Future14
' Alias SondeValuesSorted(59) = Sonde_Future15
'Alias SondeValuesSorted(60) = Sonde_Future16


DataTable(Ai1, True, 3000) ' Status information for remote diagnostics
  DataInterval(0, 1, Hr, 0)
  Sample(1, BatteryVoltage, FP2)
  Sample(1, InternalTemperature, FP2)
  Sample(1, InternalHumidity, FP2)
  Average(1, Current_mA, FP2, False): FieldNames("CurrentAverage:mA"): Units CurrentAverage = mA (-=Charge, +=Discharge)
  Maximum(1, Current_mA, FP2, False, False): FieldNames("CurrentMaximum:mA"): Units CurrentMaximum = mA (-=Charge, +=Discharge)
  Sample(1, ProcessingTime, UINT2)
  Sample(1, Status.SerialNumber, UINT2)
  Sample(1, DataloggerOSVersion, FP2)
  Sample(1, Ai1OSVersion, FP2)
  Sample(1, Status.ProgSignature, UINT2): FieldNames("ProgramSignature:0-65535)"): Units ProgramSignature = (0-65535) ' know when a program has changed
  Sample(1, ProgramCounter, Long)
  Sample(1, Status.StartUpCode, FP2): FieldNames("StartUpCode:0=Ok,-1=Power Loss,-2=Watchdog"): Units StartUpCode = (0=Ok, -1=Power, -2=Watchdog)
  Sample(1, Status.WatchdogErrors, FP2): FieldNames("WatchdogErrors:Watchdog Errors Since Compile"): Units WatchdogErrors = Errors Since Compile
  Sample(1, Status.SkippedScan, FP2): FieldNames("SkippedScans:Scans Skipped"): Units SkippedScans = Scans Skipped
  Sample(1, Status.MemoryFree, UINT2): FieldNames("MemoryFree:Bytes"): Units MemoryFree = Bytes
  Sample(1, Status.CellUsageToday, FP2): FieldNames("CellUsageToday:kB"): Units CellUsageToday = kB
  Sample(1, Status.CellUsageMonth, Long): FieldNames("CellUsageThisMonth:kB"): Units CellUsageThisMonth = kB 
  Sample(1, Status.CellRSSI, FP2): FieldNames("CellRSSI:dBm"): Units CellRSSI = dBm ' Received Signal Strength Indicator
  Sample(1, Status.CellNetBand, FP2): FieldNames("CellNetBand:band")
  Sample(1, Latitude, IEEE4)
  Sample(1, Longitude, IEEE4)
  Sample(1, GPSSatellitesInView, FP2)
  Sample(1, Pressure_mH2O, FP2)
  Maximum(1, ReadAttempts, UINT2, False, False)
EndTable


Function TimeStamp As String ' Adds time onto end of message, formatted to H:MM:SS
  TimeStamp = Year + "/" + Month + "/" + DayOfMonth + " "
  If Hour < 10 Then TimeStamp += "0"
  TimeStamp += Hour + ":"
  If Minute < 10 Then TimeStamp += "0" 
  TimeStamp += Minute + ":"
  If Second < 10 Then TimeStamp += "0"
  TimeStamp += Second
EndFunction

' Turn on 12V and 5V power to Sonde and RS485 adapter
Sub WakeUpSonde()
  WriteIO(&B01000000, &B01000000)
  ExciteV(Vx1, 5000, 0)
EndSub

' Turn of 12V and 5V power to Sonde and RS485 adapter
Sub PowerDownSonde()
  WriteIO(&B01000000, 0)
  ExciteV(Vx1, 0, 0)
EndSub

' Perform startup steps needed to being measurement
Sub Initialization
  ExciteV(Vx2, 0, 0) ' put the power regulator in known off state
  SerialOpen(ComC2_Rx, 9600, 0, 0, GPS_BUFFER, ALLOW_SLEEP)
  RealTime(rTime)
  Delay(0, 500, mSec) ' delay in case multiple messages are generated
  SetSetting("PakBusTCPClients", "(drema.konectgds.com,9200)") ' Pakbus Router
  SetSetting("PakBusAddress", $PAKBUS_ADDRESS)
  Battery(BatteryVoltage) ' Get a battery voltage reading so that on first execution it will have a reading
  SetSetting("CellEnabled", True) ' Make sure that the modem is turned on
  SetSetting("CellAPN", "so01.VZWSTATIC")
  SetSetting("CellPwrStartTime", CELL_WINDOW_START) ' When to power up the modem
  SetSetting("CellPwrDuration", CELL_WINDOW_DURATION) ' How long is each window
  SetSetting("CellPwrRepeat", CELL_WINDOW_FREQUENCY) ' When does the window repeat, i.e. hourly
  SetSetting("CellBillingDay", 1) ' When to roll over the monthly usage
  SetSetting("CellKeepAlive", "www.google.com") ' URL to ping to verify network connectivity.
  SetSetting("CellKeepAliveTime", 30) ' How often to ping test the link, minutes
  IPNetPower(5, 1, 0) ' Make sure modem is on
  Call WakeUpSonde()
  Delay(0, 25000, mSec)
  YSIPInit() ' YSI library, can this happen on every measurement?
  findSonde(3) ' YSI library
  Call PowerDownSonde()
  DataloggerOSVersion = Right(Status.OSVersion, 5) ' Char(5) = 10.01
EndSub


' Send to remote server if there are new measurements.
Sub Hydrosphere(MaxAttempts As Long)
  Dim Socket As Long
  Dim TxResponse As Long
  Dim TxAttempts = 0
  RealTime(rTime)

  If HydrosphereBufferNextPointer > 1 Then
    HydrosphereNames = "SN="
    For i = 1 To PARAMETERS_TO_SEND
      HydrosphereNames += !(ParameterToSend(i)) ' name of memory location is the canonical vendor name
      If i < PARAMETERS_TO_SEND Then
        HydrosphereNames += ","
      EndIf
    Next i
    Do While (HydrosphereBufferNextPointer > 1) AND (TxAttempts < MaxAttempts)
      TxAttempts += 1
      Socket = TCPOpen("stormcentral.waterlog.com", 32212, 1000, HYDROSPHERE_TIMEOUT)
      If Socket <> 0 Then
        SerialFlush(Socket)
        SerialOut(Socket,"SL(" + HYDROSPHERE_ID + ")" + CR, "OK", 1, HYDROSPHERE_TIMEOUT)
        SerialOut(Socket, HydrosphereNames, "OK", 1, HYDROSPHERE_TIMEOUT)
        TxResponse = SerialOut(Socket, HydrosphereDataBuffer(1), "OK", 1, HYDROSPHERE_TIMEOUT)
        SerialOut(Socket, "DIS" + CR, "OK", 1, HYDROSPHERE_TIMEOUT)
        TCPClose(Socket)
      Else
        Message = "No connection. "
        TxResponse = 0 ' Make sure that the last OK is not still in the status
      EndIf
      If TxResponse = 2 Then ' If "OK" was sent
        If HydrosphereBufferNextPointer > 2 Then ' still have values in the Buffer
          For i = 1 To (HydrosphereBufferNextPointer - 2)
            HydrosphereDataBuffer(i) = HydrosphereDataBuffer(i+1)
          Next i
        EndIf
        HydrosphereDataBuffer(HydrosphereBufferNextPointer-1) = "" ' Clear the last message
        HydrosphereBufferNextPointer = HydrosphereBufferNextPointer - 1
        Message += "Report " + HydrosphereBufferNextPointer + " sent. "
      Else
        Message += "No OK (" + TxResponse + "). "
      EndIf
    Loop
  Else
    Message = "No data to send."
  EndIf
EndSub

Sub SensorMeasurements(MaxAttempts as Long)
  Dim AddressToRead As Long
  Call WakeUpSonde()
  Delay(0, 200, mSec)
  ReadAttempts = 0
  Do While NOT (sondefound) AND (ReadAttempts < MaxAttempts)
    findSonde(3) ' YSI library
  Loop
  If NOT (sondefound) Then
    Message = "No sonde found. " + TimeStamp()
    Call PowerDownSonde()
    Exit Sub
  EndIf
  sondeCheck() ' YSI library
  getSondeParams() ' YSI library
  ReadAttempts = 0
  Do While (ReadAttempts < MaxAttempts)
    ReadAttempts += 1
    Message = "Reading sonde values, attempt " + ReadAttempts + TimeStamp()
    ' Prepare parameters to check with NaN so that a successful read is identified
    Sonde_External_Voltage = NaN ' YSI library
    External_Temp = NaN ' YSI library
    Depth = NaN ' YSI library
    RealTime(rTime)
    getSondeValues() ' YSI library
    sortYSIPData() ' YSI library
    ExternalTemp = External_Temp ' Change naming
    If Sonde_External_Voltage = NaN Then 
      Message = "Sonde communication error. " + TimeStamp()
    ElseIf Sonde_External_Voltage = 0 Then
      Message = "Missing measurements error. " + TimeStamp()
    Else
      Message = "Sonde read complete." + TimeStamp()
      getSondeSN() ' YSI library
      CallTable SondeValues ' YSI library
      ExitDo
    EndIf
  Loop

  CallTable YSISondeMeta ' YSI library, must take measurements first

  ParameterToSend(1) = @ExternalTemp
  ParameterToSend(2) = @SpConductivity_us
  ParameterToSend(3) = @Pressure_abs
  ParameterToSend(4) = @Chlorophyll_ugL
  ParameterToSend(5) = @Chlorophyll_RFU
  ParameterToSend(6) = @BGA_PE_ugL
  ParameterToSend(7) = @BGA_PE_RFU
  ParameterToSend(8) = @BatteryVoltage
  ParameterToSend(9) = @InternalHumidity
  ParameterToSend(10) = @Salinity
  ParameterToSend(11) = @ODO
  ParameterToSend(12) = @ODO_Sat
  ParameterToSend(13) = @Latitude
  ParameterToSend(14) = @Longitude

  HydrosphereData = "D=" + FormatFloat(Month,"%02.0f") + "/" + FormatFloat(DayOfMonth,"%02.0f") + "/" + FormatFloat((Year MOD 100),"%02.0f") + "," + FormatFloat(Hour,"%02.0f") + ":" + FormatFloat(Minute,"%02.0f") + ":" + FormatFloat(Second,"%02.0f") + ","
  For i = 1 To PARAMETERS_TO_SEND
    AddressToRead = (ParameterToSend(i)) ' Cannot read the value directly
    HydrosphereData += !AddressToRead
    If i < PARAMETERS_TO_SEND Then 
      HydrosphereData += ","
    EndIf
  Next i

  If HydrosphereBufferNextPointer <= BUFFER_SIZE Then
    HydrosphereDataBuffer(HydrosphereBufferNextPointer) = HydrosphereData + CR
    HydrosphereBufferNextPointer += 1
  EndIf
  Call PowerDownSonde()
EndSub


Sub SensorCleaning(Wait as Long, MaxAttempts as Long)
  Dim Attempts As Long = 0
  Call WakeUpSonde()
  Delay(0, 200, mSec)
  Do While (NOT sondefound) AND (Attempts < MaxAttempts)
    findSonde(3) ' YSI library
  Loop
  If (sondefound) Then
    startWipe() ' full wipe is 2 in each direction, takes approximately 22-25s
    Delay(0, Wait, Sec) ' Wait for wiper
    ' YSI library, updates `WiperPosition` variable?
    getWipeStatus()
  EndIf
  Call PowerDownSonde()
EndSub


' Perform diagnostic checks
Sub SystemCheck
  Dim HumidityVoltage As Float
  Dim PressureFirstReading As Boolean = True ' First time through, copy the initial value to all elements in array
  Dim PressureArray(PRESSURE_READINGS) As Float ' Array to hold readings from which the median value is used
  Dim PressureTimeArray(PRESSURE_TIME_AVERAGING) As Float ' Array to hold the time series of median filtered readings
  Dim PressureTimeArraySorted(PRESSURE_TIME_AVERAGING) ' To hold the sorted values for median selection
  Dim Current_mV As Float
  Dim CommaCount As Long ' Use to make sure I have enough data
  Dim Comma1 As Long
  Dim Comma2 As Long
  Dim InternalCounter As Long
  Dim GPSString As String * GPS_BUFFER ' NMEA 0183 Processed String
  Dim GPSReadingsString(GPS_PARAMETERS) As String * 16
  Dim RawGPSString As String * GPS_BUFFER ' NMEA 0183 String buffer
  Dim GPSStart As Long ' Start character For NMEA Message
  Dim GPSEnd As Long ' End character For NMEA Message
  Dim GPSLength As Long
  Dim GPSReadings(GPS_PARAMETERS) As Float
  ' Alias GPSReadings(1) = GPS_UTCtime: Units GPS_UTCtime = HHMMSS
  Alias GPSReadings(2) = GPS_Latitude_dddmm: Units GPS_Latitude_dddmm = dddmm.mmmm
  Alias GPSReadings(3) = GPS_LatitudeHemisphere: Units GPS_LatitudeHemisphere = 1=N, -1=S
  Alias GPSReadings(4) = GPS_Longitude_dddmm: Units GPS_Longitude_dddmm = dddmm.mmmm
  Alias GPSReadings(5) = GPS_LongitudeHemisphere: Units GPS_LongitudeHemisphere = 1=E, -1=W
  ' Alias GPSReadings(6) = GPS_QualityIndicator: Units GPS_QualityIndicator = 0=NoFix,1=GPS,2=DIFFERENTIAL
  Alias GPSReadings(7) = GPS_Satellites: Units GPS_Satellites = count
  ' Alias GPSReadings(8) = GPS_HDOP: Units GPS_HDOP = error estimate
  ' Alias GPSReadings(9) = GPS_Height: Units GPS_Height = meters

  PanelTemp(InternalTemperature, FILTER_FREQUENCY) ' indicator for analog errors - when it has noise in the data
  Battery(BatteryVoltage) ' Measure using the CR300 battery voltage hardware

  ExciteV(Vx2, 3300, 0) ' 3.3V for humidity sensor
  VoltSe(HumidityVoltage, 1, mV2500, HUMIDITY_PORT, True, 50000, FILTER_FREQUENCY, 1.0, 0)
  InternalHumidity = (((HumidityVoltage/3300)-0.1515)/0.0052)/(1.0546-0.00216*InternalTemperature)
  If InternalHumidity > 100 Then InternalHumidity = 100
  ExciteV(Vx2, 5000, 0) ' Barometer uses 5V excitation
  For i = 1 To PRESSURE_READINGS
    VoltSe(PressureArray(i), 1, mv2500, PRESSURE_PORT, True, 2000, 50, 0.001, 0) ' 0.001 convert to volts
  Next i
  SortSpa(PressureArray(), PRESSURE_READINGS, PressureArray())
  Pressure_Voltage = PressureArray(Ceiling(PRESSURE_READINGS/2))
  If PressureFirstReading Then ' First time fill with the initial value
    For i = 1 To PRESSURE_TIME_AVERAGING
      PressureTimeArray(i) = Pressure_Voltage
    Next i
    PressureFirstReading = False
  Else
    For i = 1 To PRESSURE_TIME_AVERAGING - 1
      PressureTimeArray(i) = PressureTimeArray(i + 1)
    Next i
    PressureTimeArray(PRESSURE_TIME_AVERAGING) = Pressure_Voltage
  EndIf
  SortSpa(PressureTimeArraySorted(), PRESSURE_TIME_AVERAGING, PressureTimeArray())
  Pressure_Voltage = PressureTimeArraySorted(Ceiling(PRESSURE_TIME_AVERAGING/2))
  Pressure_hPa = (0.725*Pressure_Voltage-0.2625)*1000
  Pressure_mH2O = (Pressure_hPa - 1013.25) * hPa_TO_m ' Offset relative to standard atmospheric pressure
  ExciteV(Vx2, 3300, 0) ' TODO: Needed?
  ExciteV(Vx2, 5000, 0) ' Step up to 5V for other internal sensors, including GPS
  VoltSe(Current_mV, 1, mv2500, 5, True, 0, FILTER_FREQUENCY, 1, 0)
  Current_mA = (Current_mV - CURRENT_ZERO_mV) * 5 ' Normal output is 400mA/1000mV, or 2.5mV/mA, but with 2:1 voltage divider it is 5mV/mA

  SerialIn(RawGPSString, ComC2_Rx, 50, 0, GPS_BUFFER) ' Termination when characters stop being received
  SerialFlush(ComC2_Rx) ' Clear out any data so a fresh reading is taken next cycle
  GPSStart = InStr(1, RawGPSString, "$GPGGA", 2) ' http://aprs.gids.nl/nmea/#gga
  GPSEnd = InStr(GPSStart+1, RawGPSString, "M", 2) ' Find the position of the terminator: http://aprs.gids.nl/nmea/#gga
  If (GPSStart>0) AND (GPSEnd>0) Then
    GPSString = Mid(RawGPSString,GPSStart,GPSEnd-GPSStart)  ' Get the part between the start and the end
    GPSLength = Len(GPSString)
    Comma2 = 1
    CommaCount = 0 ' Now parse the information and convert to double precision data, starting at the start of the string
    For InternalCounter = 1 To GPS_PARAMETERS
      Comma1 = InStr(Comma2, GPSString, ",", 2)
      Comma2 = InStr(Comma1+1, GPSString, ",", 2) ' Start searching at the position of the last comma
      If Comma2 > 0 Then
        GPSReadingsString(InternalCounter) = Mid(GPSString,Comma1+1,Comma2-Comma1-1) ' If it isn't above zero, the string was truncated for some reason
        CommaCount+=1
      EndIf
    Next InternalCounter
    For InternalCounter = 1 To GPS_PARAMETERS
      GPSReadings(InternalCounter) = GPSReadingsString(InternalCounter) ' Convert from string to double
    Next InternalCounter
    If CommaCount >= 9 AND (GPS_Satellites >= GPS_SATELLITES_REQUIRED) Then ' We have enough satellites so save the information
      Latitude = Floor(GPS_Latitude_dddmm / 100.0) + (GPS_Latitude_dddmm MOD 100)/60
      Longitude = Floor(GPS_Longitude_dddmm / 100.0) + (GPS_Longitude_dddmm MOD 100)/60
      If GPSReadingsString(3) = "S" Then ' Add the sign to the latitude / longitude
        GPS_LatitudeHemisphere = -1
        GPS_Latitude_dddmm = -GPS_Latitude_dddmm
        Latitude = -Latitude
      Else
        GPS_LatitudeHemisphere = 1
      EndIf
      If GPSReadingsString(5) = "W" Then
        GPS_LongitudeHemisphere = -1
        GPS_Longitude_dddmm = -GPS_Longitude_dddmm
        Longitude = -Longitude
      Else
        GPS_LongitudeHemisphere = 1
      EndIf
      GPSSatellitesInView = GPS_Satellites
      Message = "GPS location complete, using " + GPS_Satellites + " satellites."
    EndIf
  EndIf
  ExciteV(Vx2, 0, 0)

  ' Toggle modem power based on battery voltage
  If NOT (LowPowerMode) AND (BatteryVoltage < LOW_BATTERY_SHUTDOWN_V) Then
    LowPowerMode = True
    IPNetPower(5, 0)
  ElseIf (LowPowerMode) AND (BatteryVoltage > LOW_BATTERY_RESTORE_V) Then
    LowPowerMode = False
    IPNetPower(5, 1)
  EndIf
  CallTable Ai1
  ProgramCounter += 1 ' Increment the program counter
  ProcessingTime = Status.ProcessTime
EndSub


BeginProg
  Call Initialization

  ' Measure water quality
  Scan(MEASUREMENT_INTERVAL_S, Sec, 0, 0)
    Call SensorMeasurements(MAX_READ_ATTEMPTS)
  NextScan

  ' System check
  SlowSequence
    Scan(DIAGNOSTIC_INTERVAL_S, Sec, 0, 0)
      Call SystemCheck
    NextScan
  EndSequence

  ' Communications
  SlowSequence
    Scan(REPORT_INTERVAL_S, Sec, 0, 0)
      Call Hydrosphere(MAX_TX_ATTEMPTS)
    NextScan
  EndSequence

  ' Sensor cleaning
  SlowSequence
    Scan(CLEANING_INTERVAL_S, Sec, 0, 0)
      Call SensorCleaning(40, MAX_READ_ATTEMPTS)
    NextScan
  EndSequence

EndProg
